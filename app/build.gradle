import org.jetbrains.kotlin.gradle.dsl.KotlinCompile

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
}

android {
    splits {
        abi {
            enable = true
            reset()
            include 'arm64-v8a', 'x86_64', 'armeabi-v7a', 'x86'
            universalApk = true
        }
    }

    signingConfigs {
        release {
        }
    }

    namespace 'dev.whisper.voice'
    compileSdk 33

    defaultConfig {
        applicationId "dev.whisper.voice"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {

        release {

            postprocessing {
                removeUnusedResources true      // == shrinkResources
                removeUnusedCode false          // this
                obfuscate false                 // + this
                optimizeCode true               // + this == minifyEnabled
                proguardFile 'proguard-rules.pro'
            }

//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    ndkVersion '25.1.8937393'
    buildToolsVersion '33.0.0'
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'

    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.3.1'
    implementation 'androidx.compose.material3:material3:1.0.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"

    def nav_version = "2.5.3"
    implementation "androidx.navigation:navigation-compose:$nav_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_ui_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.28.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    implementation "androidx.compose.material3:material3-window-size-class:1.0.1"
    implementation "androidx.compose.ui:ui-text-google-fonts:$compose_ui_version"

    implementation "androidx.preference:preference:1.2.0"

    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // To use Kotlin annotation processing tool (kapt)
    kapt "androidx.room:room-compiler:$room_version"


    def dagger_version = "2.35.1"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation project(":core")
}

// TODO: do not use experimental APIs
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
    }
}